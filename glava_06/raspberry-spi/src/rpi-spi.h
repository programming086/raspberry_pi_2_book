// Copyright (c) 2011, XMOS Ltd., All rights reserved
// This software is freely distributable under a derivative of the
// University of Illinois/NCSA Open Source License posted in
// LICENSE.txt and at <http://github.xcore.com/>

///////////////////////////////////////////////////////////////////////////////
//
// SPI Slave
//
// Optimised for raspberry PI (includes support for false CS cycles generated by RPI)
// Fixed to using SPI mode 3 only, CPOL, CPHA = 1, 1


#ifndef _rpi_spi_h
#define _rpi_spi_h

#define BUFFER_LENGTH 8 //SPI Rx and Tx buffer lengths

//SPI slave state machine states
typedef enum {SPI_IDLE, SPI_SELECTED, CLK_ACTIVE, SPI_TRANSFER} spi_slave_state;

//Structure containing the resources required for the SPI slave interface.
//It consists of two 1bit input ports, one 1:8bit buffered input port and one 1:8bit buffered output port.
typedef struct
{
    in port ss;                 //RPI slave select
    in buffered port:8 mosi;    //master out slave in
    out buffered port:8 miso;   //master in slave out
    in port sclk;               //serial clock
    out port flash_ss;          //startKIT flash SS
    clock blk;                  //clock block for connecting clk to in/out strobe
} spi_slave_pins;

#define SS_BITMASK  0b0100      //bit within P32A for SPI select (SS)

//API for using this SPI slave module
interface spi_slave_if{
    {int , unsigned char * movable, unsigned char * movable } get_buffs(void); //method to get SPI buffers and valid flag, Rd ptr, Wr ptr
    [[clears_notification]] void return_buffs (unsigned char * movable rd_ptr, unsigned char * movable wr_ptr); //method to read/write SPI recieved buffer
    [[notification]] slave void transfer_notify(void);      //notifies client that rpi has sent/receieved a SPI packet
};


//Configures ports and clocks, clearing port buffers
void spi_slave_init(spi_slave_pins &spi_if);

//Stops the clocks running, and disables the SPI ports
void spi_slave_shutdown(spi_slave_pins &spi_if);

//Main SPI slave server task. Called at startup in it's own core and runs forever
void spi_slave(spi_slave_pins &spi_if, server interface spi_slave_if buff_access);

#endif
